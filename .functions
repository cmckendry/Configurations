# Simple calculator
function calc() {
  local result=""
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
  #                       └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
        -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
        -e 's/0*$//;s/\.$//'   # remove trailing zeros
  else
    printf "$result"
  fi
  printf "\n"
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@"
}

# Highlight a regex
function color() {
  egrep --color=always "$|$@"
}

# Show the headers of a GET response
function headers() {
  curl -is "$@" | sed '/^$/,$d'
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  )

  local cmd=""
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar using \`${cmd}\`…"
  "${cmd}" -v "${tmpFile}" || return 1
  [ -f "${tmpFile}" ] && rm "${tmpFile}"
  echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
function gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`"
    return 1
  fi
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}"
  local ip=$(ipconfig getifaddr en1)
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  else # pipe
    python -mjson.tool | pygmentize -l javascript
  fi
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "Testing ${domain}…"
  echo # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_header, no_serial, no_version, \
      no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
      echo "Common Name:"
      echo # newline
      echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
      echo # newline
      echo "Subject Alternative Name(s):"
      echo # newline
      echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
        | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
      return 0
  else
    echo "ERROR: Certificate not found.";
    return 1
  fi
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
  local title
  local body
  if [ -t 0 ]; then
    title="$1"
    body="$2"
  else
    title=$(cat)
  fi
  osascript >/dev/null <<EOF
tell application "Notes"
  tell account "iCloud"
    tell folder "Notes"
      make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
    end tell
  end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
  local text
  if [ -t 0 ]; then
    text="$1" # argument
  else
    text=$(cat) # pipe
  fi
  osascript >/dev/null <<EOF
tell application "Reminders"
  tell the default list
    make new reminder with properties {name:"$text"}
  end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
  for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
    xattr -r -d "$attribute" "$@"
  done
}

# Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage: `gi contrib-watch contrib-uglify zopfli`
function gi() {
  local IFS=,
  eval npm install --save-dev grunt-{"$*"}
}

function vcl-get() {
  local VCL_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
  curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE/version/$VCL_VER/vcl/www.1stdibs.com" | jq -r '.content' > ~/Downloads/www.1stdibs.com.vcl
  }

function vcl-push() {
  if [ `curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions | max_by(.number) | .locked'` == 'true' ]; then
    echo "Current version locked, creating new version"
    local VCL_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
    curl -X PUT -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE/version/$VCL_VER/clone" | jq '.' || echo
    ## TODO: reduce this to one call by properly parsing the response from the create-version req
    local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions | max_by(.number) | .number'`
  else
    local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions | max_by(.number) | .number'`
  fi
  curl -s -X PUT -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE/version/$MAX_VER/vcl/www.1stdibs.com" --data-urlencode "content=`cat ~/Downloads/www.1stdibs.com.vcl`" | jq '.'
  echo "SUCCESS"
}

function vcl-diff() {
  local ACTIVE_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
  local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions | max_by(.number) | .number'`
  curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE/diff/from/$ACTIVE_VER/to/$MAX_VER" | jq -r '.diff' | egrep -C 10 '^-.*|^\+'
}

function vcl-stage-diff() {
  local STAGE_ACTIVE_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
  local PROD_ACTIVE_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
  curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE/version/$STAGE_ACTIVE_VER/vcl/stage.1stdibs.com.vcl" | jq -r '.content' > /tmp/stage.vcl
  curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE/version/$PROD_ACTIVE_VER/vcl/www.1stdibs.com" | jq -r '.content' > /tmp/prod.vcl
  diff /tmp/stage.vcl /tmp/prod.vcl
}

function vcl-activate() {
  local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE" | jq '.versions | max_by(.number) | .number'`
  curl -X PUT -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_PROD_SERVICE/version/$MAX_VER/activate" | jq '.'
}

function urlencode() {
  # urlencode <string>
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
      local c="${1:i:1}"
      case $c in
          [a-zA-Z0-9.~_-]) printf "$c" ;;
          *) printf '%%%02X' "'$c" ;;
      esac
  done

  LC_COLLATE=$old_lc_collate
}

function urldecode() {
  # urldecode <string>

  local url_encoded="${1//+/ }"
  printf '%b' "${url_encoded//%/\\x}"
}

###############

function vcl-get-stage() {
  local VCL_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
  curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE/version/$VCL_VER/vcl/stage.1stdibs.com.vcl" | jq -r '.content' > ~/Downloads/stage.1stdibs.com.vcl
  }

function vcl-push-stage() {
  if [ `curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions | max_by(.number) | .locked'` == 'true' ]; then
    echo "Current version locked, creating new version"
    local VCL_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
    curl -X PUT -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE/version/$VCL_VER/clone" | jq '.' || echo
    ## TODO: reduce this to one call by properly parsing the response from the create-version req
    local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions | max_by(.number) | .number'`
  else
    local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions | max_by(.number) | .number'`
  fi
  curl -s -X PUT -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE/version/$MAX_VER/vcl/stage.1stdibs.com.vcl" --data-urlencode "content=`cat ~/Downloads/stage.1stdibs.com.vcl`" | jq '.'
  echo "SUCCESS"
}

function vcl-diff-stage() {
  local ACTIVE_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions[] | select(.active == true) | .number'`
  local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions | max_by(.number) | .number'`
  curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE/diff/from/$ACTIVE_VER/to/$MAX_VER" | jq -r '.diff' | egrep -C 10 '^-.*|^\+'
}

function vcl-activate-stage() {
  local MAX_VER=`curl -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE" | jq '.versions | max_by(.number) | .number'`
  curl -X PUT -s -H "Fastly-Key: $FASTLY_KEY" "https://api.fastly.com/service/$FASTLY_STAGE_SERVICE/version/$MAX_VER/activate" | jq '.'
}

function twitch() {
  youtube-dl --quiet --no-warnings -f "best[height=480],best[height=720],best" --cookies ~/twitch-cookies "https://twitch.tv/${1}" -o - | /Applications/VLC.app/Contents/MacOS/VLC --no-video-deco --no-embedded-video --no-interact --quiet - &
}

function twitchlist() {
  local FOLLOWING=`curl -s -H 'Accept: application/vnd.twitchtv.v5+json' -H "Client-ID: ${TWITCH_KEY}" 'https://api.twitch.tv/kraken/users/36438898/follows/channels?limit=100' | jq -r '.follows[].channel | ._id' | awk -v ORS=, '{ print $1 }'`
  curl -s -H 'Accept: application/vnd.twitchtv.v5+json' -H "Client-ID: ${TWITCH_KEY}" "https://api.twitch.tv/kraken/streams?channel=${FOLLOWING}" | jq -r '.streams[] | select(.stream_type=="live") | [.channel.name, .channel.display_name, .channel.status, .game, .viewers] | @csv' | awk -F',' '{ if ($1 == tolower($2)) { printf $2"," } else { printf $1"("$2")," } {for (i=3; i<=NF; i++) printf "%s,",$i} print '\r' }' | sed 's/"("/(/;s/")/)"/' | sed 's/\([^"]\),/\1/g' | column -s"," -t | sed 's/"//g'
}

function twitchgame() {
  local GAMETITLE=`urlencode "${1}"`
  curl -s -H 'Accept: application/vnd.twitchtv.v5+json' -H "Client-ID: ${TWITCH_KEY}" "https://api.twitch.tv/kraken/streams?game=${GAMETITLE}&language=en&limit=20&offset=0" | jq -r '.streams[] | [.channel.name, .channel.display_name,.game,(.viewers|tostring),.channel.status] | @csv' | awk -F',' '{ if ($1 == tolower($2)) { printf $2"," } else { printf $1"("$2")," } {for (i=3; i<=NF; i++) printf "%s,",$i} print '\r' }' | sed 's/"("/(/;s/")/)"/' | sed 's/\([^"]\),/\1/g' | column -s"," -t | sed 's/"//g'
}

function cleanup() {
  local TODAY=`date +%Y-%m-%d`
  find /data/logs/tomcat/ -regextype posix-egrep -type f -regex '.*.log' -and -not -regex ".*${TODAY}.log" -delete
  for LOGFILE in `find /data/logs/tomcat/ -regextype posix-egrep -type f -regex ".*${TODAY}.log"`; do sudo sh -c "echo '' > $LOGFILE"; done
  for DEPLOYABLE in /data/*; do for SNAPSHOT in `sudo find $DEPLOYABLE -maxdepth 1 -regextype posix-egrep -type d -regex '.*_201[0-9]{10}' | sort -n | head -n -1`; do sudo rm -rf $SNAPSHOT; done; done
}

function clapback() {
  echo $@ | tr [:lower:] [:upper:] | awk 'BEGIN{OFS=" :clap::skin-tone-2: ";} {$1=$1; print $0 " :clap::skin-tone-2:"}'
  echo $@ | tr [:lower:] [:upper:] | awk 'BEGIN{OFS="👏";} {$1=$1; print $0 "👏"}'
}

function nsl() {
  local DIGRES=`dig +nocomment +noquestion +nocmd +noauthority +noadditional $1`
  echo $DIGRES | sed -n 's/.*SERVER: \([0-9\.\#]*\)(\([0-9\.]*\)).*/Server:         \2/p'
  echo $DIGRES | sed -n 's/.*SERVER: \([0-9\.\#]*\)(\([0-9\.]*\)).*/Address:        \1/p'
  echo
  echo "Non-authoritative answer:"
  echo $DIGRES | awk '{ print "Name:   "$1 }' | sed 's/\.$//'
  echo $DIGRES | sed -n 's/.*IN A \([0-9\.]*\).*/Address: \1/p'
  echo
}

function get_ticket() {
  local TICKET=`curl -s -u ${JIRA_USER}:${JIRA_PASS} -X GET -H "Content-Type: application/json" "https://1stdibs.atlassian.net/rest/api/latest/issue/${1}"`
  local KEY=`echo "${TICKET}" | jq -r '.key'`
  local SUMMARY=`echo "${TICKET}" | jq -r '.fields.summary'`
  echo $KEY - $SUMMARY
}

function jenk() {
  curl --user $JENKINS_USER:$JENKINS_PASS -XPOST "http://${JENKINS_HOST}/job/$@/build"
}

